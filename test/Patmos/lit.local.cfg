targets = set(config.root.targets_to_build.split())
if not 'Patmos' in targets:
    config.unsupported = True

# Complete path to _start function
_start_file=os.path.dirname(__file__) + "/_start.ll"

# Make sure the _start function file doesn't get treated as a test
config.excludes.add("_start.ll")

# setup substitution for %test_no_runtime_execution.
config.substitutions.append(('%test_no_runtime_execution',
	# Compile program
	"llc %s -filetype=obj -o %t_lit_cfg_compiled $LLC_ARGS && \\\n" +
	# Compile startup function
	"llc " + _start_file + " -filetype=obj -o %t_lit_cfg_start && \\\n" +
	# Link program and startup function and emit ELF
	"patmos-ld -nostdlib -static -o %t %t_lit_cfg_start %t_lit_cfg_compiled $LD_ARGS  && \\\n" +
	# Run program
	"pasim %t -c 800 $PASIM_ARGS"
))

# setup substitution for %XFAIL-filecheck
config.substitutions.append(('%XFAIL-filecheck',
	"> \"%t_xfail-filecheck_stdout\" " + 
	"2> \"%t_xfail-filecheck_stderr\" " + 
	"&& { " + 
		"cat \"%t_xfail-filecheck_stdout\"; " +
		">&2 cat \"%t_xfail-filecheck_stderr\"; " +
		">&2 echo \"XFAIL-filecheck: Expected failure, but was success.\"; " +
		"exit 1;} " + # If the command succeeds, none of the below lines are executed
	"|| " + 
	"CHECK_STDOUT=${CHECK_STDOUT:-false}; " +
	"$CHECK_STDOUT && XFAIL_FILECHECK_FILE=\"%t_xfail-filecheck_stdout\" || XFAIL_FILECHECK_FILE=\"%t_xfail-filecheck_stderr\" ; " +
	"FileCheck --input-file \"$XFAIL_FILECHECK_FILE\" "
))
