//===-- PatmosISelDAGToDAG.cpp - A dag to dag inst selector for Patmos ----===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Patmos target.
//
//===----------------------------------------------------------------------===//

#include "Patmos.h"
#include "PatmosTargetMachine.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;


/// PatmosDAGToDAGISel - Patmos specific code to select Patmos machine
/// instructions for SelectionDAG operations.
///
namespace {
  class PatmosDAGToDAGISel : public SelectionDAGISel {
    const PatmosTargetLowering &Lowering;
    const PatmosSubtarget &Subtarget;

  public:
    PatmosDAGToDAGISel(PatmosTargetMachine &TM)
      : SelectionDAGISel(TM, TM.getOptLevel()),
        Lowering(*TM.getTargetLowering()),
        Subtarget(*TM.getSubtargetImpl()) { }

    virtual const char *getPassName() const {
      return "Patmos DAG->DAG Pattern Instruction Selection";
    }

  // Include the pieces autogenerated from the target description.
  #include "PatmosGenDAGISel.inc"

  private:
    SDNode *Select(SDNode *N);

    // not used currently
    SDNode *SelectBRCOND(SDNode *N);

    // Undo combine step if node forms integer ABS pattern
    // NB: not used currently
    SDNode *SelectABSPattern(SDNode *N);

    // These functions create a predicate operand from an i1 value
    bool SelectPred(SDValue N, SDValue &Reg, SDValue &Inv);
    bool SelectPredInv(SDValue N, SDValue &Reg, SDValue &Inv);
  };
}  // end anonymous namespace

/// createPatmosISelDag - This pass converts a legalized DAG into a
/// Patmos-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createPatmosISelDag(PatmosTargetMachine &TM) {
  return new PatmosDAGToDAGISel(TM);
}



SDNode *PatmosDAGToDAGISel::Select(SDNode *Node) {

  if (Node->isMachineOpcode())
    return NULL;   // Already selected.

  switch (Node->getOpcode()) {
  /*
  case ISD::XOR: {
    SDNode *ResNode = SelectABSOp(Node);
    if (ResNode)
      return ResNode;
    // Other cases are autogenerated.
    break;
  }
  */
  //case ISD::BRCOND:   return SelectBRCOND(Node);
  default: break;
  }
  // autogenerated
  return SelectCode(Node);

}


/// Target-specific DAG combining for ISD::XOR.
/// Target-independent combining lowers SELECT_CC nodes of the form
/// select_cc setg[ge] X,  0,  X, -X
/// select_cc setgt    X, -1,  X, -X
/// select_cc setl[te] X,  0, -X,  X
/// select_cc setlt    X,  1, -X,  X
/// which represent Integer ABS into:
/// Y = sra (X, size(X)-1); xor (add (X, Y), Y)
/// Patmos instruction selection detects the latter and matches it back to
/// compare and conditional negate.
SDNode *PatmosDAGToDAGISel::SelectABSPattern(SDNode *N){
  SDValue XORSrc0 = N->getOperand(0);
  SDValue XORSrc1 = N->getOperand(1);

  if (XORSrc0.getOpcode() != ISD::ADD || XORSrc1.getOpcode() != ISD::SRA)
    return NULL;

  EVT VT = N->getValueType(0);
  SDLoc dl(N);
  SDValue ADDSrc0 = XORSrc0.getOperand(0);
  SDValue ADDSrc1 = XORSrc0.getOperand(1);
  SDValue SRASrc0 = XORSrc1.getOperand(0);
  SDValue SRASrc1 = XORSrc1.getOperand(1);
  ConstantSDNode *SRAConstant =  dyn_cast<ConstantSDNode>(SRASrc1);
  EVT XType = SRASrc0.getValueType();
  unsigned Size = XType.getSizeInBits() - 1;

  if (ADDSrc1 == XORSrc1 && ADDSrc0 == SRASrc0 &&
      XType.isInteger() && SRAConstant != NULL &&
      Size == SRAConstant->getZExtValue()) {

    SDValue PredFlag = CurDAG->getTargetConstant(0, MVT::i1);
    SmallVector<SDValue, 4> Ops;
    Ops.push_back(CurDAG->getRegister(Patmos::NoRegister, MVT::i1));
    Ops.push_back(PredFlag);
    Ops.push_back(ADDSrc0);
    Ops.push_back(CurDAG->getRegister(Patmos::R0, MVT::i32));

    SDNode *Compare = CurDAG->getMachineNode(Patmos::CMPLT, dl, MVT::i1, Ops);

    Ops.clear();
    Ops.push_back(SDValue(Compare, 0));
    Ops.push_back(PredFlag);
    Ops.push_back(ADDSrc0);
    SDNode *Negate  = CurDAG->getMachineNode(Patmos::NEG, dl, VT, Ops);
    return Negate;
  }

  return NULL;
}


// XXX is not used currently, as matching is done by an appropriate pattern
SDNode *PatmosDAGToDAGISel::SelectBRCOND(SDNode *N) {
  assert(N->getNumOperands() >= 3);

  SDValue Chain  = N->getOperand(0);
  SDValue Pred   = N->getOperand(1);
  SDValue Target = N->getOperand(2); // branch target
  SDValue PredInvFlag = CurDAG->getTargetConstant(0, MVT::i1);
  SDLoc dl(N);

  assert(Target.getOpcode()  == ISD::BasicBlock);
  assert(Pred.getValueType() == MVT::i1);

  // create branch node
  SmallVector<SDValue,4> Ops;
  Ops.push_back(Pred);
  Ops.push_back(PredInvFlag);
  Ops.push_back(Target);
  Ops.push_back(Chain);
  return CurDAG->getMachineNode(Patmos::BR, dl, MVT::Other, Ops);
}


bool PatmosDAGToDAGISel::SelectPred(SDValue N, SDValue &Reg, SDValue &Inv) {
  if (ConstantSDNode *Imm = dyn_cast<ConstantSDNode>(N.getNode())) {
    // immediate value
    Reg = CurDAG->getRegister(Patmos::NoRegister, MVT::i1);
    Inv = CurDAG->getTargetConstant((Imm->getConstantIntValue()->isZero())?1:0, MVT::i1);
  } else {
    // we have a register
    Reg = N;
    Inv = CurDAG->getTargetConstant(0, MVT::i1);
  }
  return true;
}

bool PatmosDAGToDAGISel::SelectPredInv(SDValue N, SDValue &Reg, SDValue &Inv) {
  if (ConstantSDNode *Imm = dyn_cast<ConstantSDNode>(N.getNode())) {
    // immediate value
    Reg = CurDAG->getRegister(Patmos::NoRegister, MVT::i1);
    Inv = CurDAG->getTargetConstant((Imm->getConstantIntValue()->isZero())?0:1, MVT::i1);
  } else {
    // we have a register
    Reg = N;
    Inv = CurDAG->getTargetConstant(1, MVT::i1);
  }
  return true;
}
